version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.4.0

commands:
  destroy-environment:
    description: Destroy back-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
  destroy-current-clusters:
    description: Destroy K8s cloudformation clusters stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - aws-eks/delete-cluster:
          cluster-name: url-shortener-<< parameters.workflow_id  >>
jobs:
  build-app:
    docker:
      - image: circleci/node:12.14.1
    steps:
      - checkout
      - restore_cache:
          keys: [build-app]
      - run:
          name: Build app resources.
          command: |
            make build
      - run:
          name: Lint app files.
          command: |
            make lint
      - save_cache:
          paths: [node_modules]
          key: build-app
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:12.14.1
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [build-app]
      - run:
          name: Analyze backend.
          command: |
            npm audit fix --force
      - save_cache:
          paths: [node_modules]
          key: build-app
  
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=url-shortener-${CIRCLE_WORKFLOW_ID:0:4} \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:4} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:4}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=url-shortener-${CIRCLE_WORKFLOW_ID:0:4}" \
              --output text >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request PUT \
              --data `aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=url-shortener-${CIRCLE_WORKFLOW_ID:0:4}" \
                --output text` \
              https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4}
            echo URL: https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4}
            echo Token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734
      - restore_cache:
          keys: [build-app]
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt

  container-health-check:
    machine: true
    steps:
      - checkout
      - run:
          name: Login Dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Check VM os.
          command: |
            hostnamectl
      - run:
          name: Build app image.
          command: |
            docker build -t gquiroa/url-shortener:$CIRCLE_BRANCH .
      - run:
          name: Run docker container.
          command: |
            docker run -d -p 80:8080 gquiroa/url-shortener:$CIRCLE_BRANCH

  deploy-app:
    machine: true
    steps:
      - checkout
      - run:
          name: Login Dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Build app image.
          command: |
            docker build -t gquiroa/url-shortener:$CIRCLE_BRANCH .
      - run:
          name: Push docker image.
          command: |
            docker push gquiroa/url-shortener:$CIRCLE_BRANCH

  configure-docker:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e7:44:9c:f4:5c:20:59:d9:18:8a:b9:ee:3e:07:da:68"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            echo "Inventory content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

  configure-clusters:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e7:44:9c:f4:5c:20:59:d9:18:8a:b9:ee:3e:07:da:68"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl
      - run:
          name: Configure clusters' server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            echo "Inventory content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-clusters.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
  
  deploy-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Add docker secret credentials to EKS cluster config
          command: |
            kubectl create secret docker-registry docker-secret \
              --docker-server="https://index.docker.io/v1/" \
              --docker-username="$DOCKER_USER" \
              --docker-password="$DOCKER_PASSWORD" \
              --docker-email="gquiroa@ufm.edu"
      - run:
          name: Get green LoadBalancer DNS if exists.
          command: |
            aws elb describe-load-balancers --query LoadBalancerDescriptions[*].DNSName --output text
            echo "$(aws elb describe-load-balancers --query LoadBalancerDescriptions[*].LoadBalancerName --output text)" > green-LB-name.txt
            ls
            cat green-LB-name.txt
      - run:
          name: Create application service account
          command: |
            kubectl apply -f aws/k8-app-service.yml && \
              kubectl get sa url-shortener-sa
      - run:
          name: Deploy app into kubernetes cluster
          command: |
            kubectl apply -f aws/k8-app-deployment.yml
      - run:
          name: Update Load Balancer
          command: |
            LB = $(cat green-LB-name.txt)
            if [ -n "${LB}" ]; then
              aws elb delete-load-balancer --load-balancer-name ${LB}
            fi
      - run:
          name: Create LoadBalancer service.
          command: |
            kubectl expose deployment url-shortener-deployment --type=LoadBalancer --name=url-shortener-service
      - run:
          name: Get Blue version LoadBalancer DNS information.
          command: |
            kubectl get service/url-shortener-service
            # aws eks update-kubeconfig --name url-shortener-ef8b
      - run:
          name: Check available services at cluster
          command: |
            kubectl get services
      - persist_to_workspace:
          root: ~/project
          paths:
            - green-LB-name.txt
      - destroy-clusters:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
          when: on_fail

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e7:44:9c:f4:5c:20:59:d9:18:8a:b9:ee:3e:07:da:68"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [build-app]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl openssh-client
            pip install awscli
      - run:
          name: Deploy kubernetes
          no_output_timeout: 30m
          command: |
            echo "Ip address to configure:"
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-artifacts.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export NewInstanceDNS=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:project,Values=url-shortener-${CIRCLE_WORKFLOW_ID:0:4}" \
              --output text)
            
            export NewInstanceDNS=$(aws elb describe-load-balancers --query LoadBalancerDescriptions[*].DNSName --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request PUT --data "${OLD_WORKFLOW_ID}" \
              https://api.memstash.io/values/workflow_id

            echo Old Workflow Id: ${OLD_WORKFLOW_ID}
            echo Actual Workflow Id: ${CIRCLE_WORKFLOW_ID:0:4}
            echo Stacks available: ${STACKS}

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name production-distro \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:4} InstanceDNS=${NewInstanceDNS} \
              --tags project=url-shortener

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            # Get old workflow id
            export OLD_WORKFLOW_ID=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" --request GET \
              https://api.memstash.io/values/workflow_id)
            # Get stack list
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo Old Workflow Id:${OLD_WORKFLOW_ID}
            echo "New id:${CIRCLE_WORKFLOW_ID:0:4}"
            echo ${STACKS}

            echo "Deleting stacks with Old Worflow ID: ${OLD_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name backend-${OLD_WORKFLOW_ID}
      - aws-eks/delete-cluster:
          cluster-name: url-shortener-$OLD_WORKFLOW_ID
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

workflows:
  prod-deployment:
    jobs:
      - build-app
      - scan-backend:
          requires: [build-app]
      - container-health-check:
          requires: [scan-backend]
      - deploy-app:
          requires: [container-health-check]
          filters:
            branches:
              only: [master]
      - aws-eks/create-cluster:
          cluster-name: url-shortener-${CIRCLE_WORKFLOW_ID:0:4}
          # requires:
          #   - deploy-app
      - deploy-cluster:
          cluster-name: url-shortener-${CIRCLE_WORKFLOW_ID:0:4}
          requires:
            - aws-eks/create-cluster
      # - aws-eks/delete-cluster:
      #     cluster-name: url-shortener-${CIRCLE_WORKFLOW_ID:0:4}
      #     requires:
      #       - test-cluster
      # - deploy-infrastructure:
      #     requires: [deploy-app]
      # - configure-docker:
      #     requires: [deploy-infrastructure]
      # - configure-clusters:
      #     requires: [deploy-infrastructure]
      # - deploy-backend:
      #     requires: [configure-docker, configure-clusters]
      - cloudfront-update:
          requires: [deploy-cluster]
      - cleanup:
          requires: [cloudfront-update]
