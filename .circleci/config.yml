version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS = 1
            SUCCESS=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request GET \
                https://api.memstash.io/values/migrations-<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS==1 ));
            then
              cd backend
              npm i
              npm run migration:revert
            fi
jobs:
  build-app:
    docker:
      - image: circleci/node:12.14.1
    steps:
      - checkout
      - restore_cache:
          keys: [build-app]
      - run:
          name: Build app resources.
          command: |
            make build
      - run:
          name: Lint app files.
          command: |
            make lint
      - save_cache:
          paths: [node_modules]
          key: build-app
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:12.14.1
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [build-app]
      - run:
          name: Analyze backend.
          command: |
            npm audit fix --force
      - save_cache:
          paths: [node_modules]
          key: build-app
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar
          command: |
            yum -y install tar gzip
      # - run:
      #     name: Ensure back-end infrastructure exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:4} \
      #         --stack-name backend-${CIRCLE_WORKFLOW_ID:0:4} \
      #         --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:4}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=url-shortener-gjqb161" \
              --output text >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request PUT \
              --data `aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=url-shortener-gjqb161" \
                --output text` \
              https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4}
            echo URL: https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4}
            echo Token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734
      - restore_cache:
          keys: [build-app]
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
  deploy-app:
    machine: true
    steps:
      - checkout
      - run:
          name: Login Dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Build app image.
          command: |
            docker build -t gquiroa/url-shortener:$CIRCLE_BRANCH .
      - run:
          name: Push docker image.
          command: |
            docker push gquiroa/url-shortener:$CIRCLE_BRANCH
          
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e7:44:9c:f4:5c:20:59:d9:18:8a:b9:ee:3e:07:da:68"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            echo "Inventory content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
  configure-clusters:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e7:44:9c:f4:5c:20:59:d9:18:8a:b9:ee:3e:07:da:68"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl
      - run:
          name: Configure clusters' server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            echo "Inventory content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-clusters.yml
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e7:44:9c:f4:5c:20:59:d9:18:8a:b9:ee:3e:07:da:68"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [build-app]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            echo "Ip address to configure:"
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
workflows:
  prod-deployment:
    jobs:
      - build-app
      - scan-backend:
          requires: [build-app]
      - deploy-app:
          requires: [scan-backend]
      - deploy-infrastructure:
          requires: [deploy-app]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - configure-clusters:
          requires: [configure-infrastructure]